@inject IHttpContextAccessor _httpContextAccessor

@using Hl7.Fhir.Model

@model GetDocumentViewModel

@{
	ISession session = _httpContextAccessor.HttpContext!.Session;

	var sessionLoginResult = session.SessionLoginResult();
}

<style>
	.head {
		font-size: 11px;
		font-style: italic;
	}

	tr.document-item {
		cursor: pointer;
	}

	tr.document-detail {
		display: none;
	}
</style>

<script>
	function onDocumentRowClick(e) {
		console.log(e);

		const rowId = e.currentTarget.getAttribute("data-id");

		console.log(rowId);

		const documentDetail = document.querySelector(`tr.document-detail[data-id='${rowId}']`);

		if (documentDetail.style.display == "table-row") {
			documentDetail.style.display = "none";
		}
		else {
			documentDetail.style.display = "table-row";
		}

	}
</script>

<script type="text/javascript">
	function setIframeContent(iframeId, rawHtml) {

		var iframe = document.getElementById(iframeId);
		iframe.contentWindow.document.open();
		iframe.contentWindow.document.write(rawHtml);
		iframe.contentWindow.document.close();
	}
</script>


<div style="max-width:1900px;margin:0 auto">

	<h4 class="display-6">Journaldokumenter</h4>

	<div style="display:flex;gap:40px">
		<div>

			<h5>Innlogget som:</h5>
			<div>
				<h6>@sessionLoginResult.Name / @sessionLoginResult.AuthorizationName - @sessionLoginResult.OrganizationName</h6>
			</div>
		</div>

		<div>

			<h5>Pasient:</h5>

			<div>
				<h6>@sessionLoginResult.PatientName <span style="font-size:14px;">(@sessionLoginResult.PatientId) @* / Kvinne (33 år) *@</span></h6>
			</div>
		</div>
	</div>

	@if (!Model.IsSuccess)
	{
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">
				Error: @Model.ErrorMessage
			</div>
		</div>
	</div>
	}
	else
	{
	@if (Model.IsShowClinicalDocumentXml)
		{
	<div class="container-fluid container-highlighted">
		<div class="row">
			<div class="col-md-12">

				<div class="textarea-container">
					<pre class="highlighted clinicaldocument" aria-hidden="true"></pre>
					<textarea class="textarea w-100 clinicaldocument" rows="10">@Model.ClinicalDocumentXml</textarea>
				</div>


			</div>
		</div>
	</div>
		}

	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">

				@if (Model.ContentType == "application/pdf")
					{
				<iframe src="data:application/pdf;base64,@Model.PdfBase64String"
						width="100%"
						height="800px"
						style="border: none;">
				</iframe>
					}

				@if (Model.ContentType == "application/xml")
					{
				<iframe id="contentIframe"
						width="100%"
						height="800px"
						style="border: none;">
				</iframe>

				<script type="text/javascript">
							setIframeContent('contentIframe', `@Html.Raw(Model.Html)`);
				</script>
					}

				@* @Html.PagedListPager(Model.Bundle.Entry, page => Url.Action("Index", "Document", new { page, sort = Model.SortExpression, pageSize = Model.PageSize }), PagedListRenderOptions.ClassicPlusFirstAndLast) *@


				@* 	<div class="pagination-container">
					<ul class="pagination">
					<li class="PagedList-skipToFirst disabled"><a>&lt;&lt;</a></li>
					<li class="PagedList-skipToPrevious disabled">
					<a rel="prev">&lt;</a></li>
					<li class="active"><span>1</span></li>
					<li>
					<a href="/Contacts?page=2&amp;sort=recent&amp;pageSize=25">2</a></li>
					<li><a href="/Contacts?page=3&amp;sort=recent&amp;pageSize=25">3</a></li>
					<li><a href="/Contacts?page=4&amp;sort=recent&amp;pageSize=25">4</a></li>
					<li><a href="/Contacts?page=10&amp;sort=recent&amp;pageSize=25">10</a></li>
					<li class="PagedList-skipToNext"><a href="/Contacts?page=2&amp;sort=recent&amp;pageSize=25" rel="next">&gt;</a></li>
					<li class="PagedList-skipToLast"><a href="/Contacts?page=219&amp;sort=recent&amp;pageSize=25">&gt;&gt;</a></li>
					</ul></div>  *@

			</div>
		</div>
	</div>
	}
</div>


<script>
	const textarea = document.querySelector('.textarea');
	const highlighted = document.querySelector('.highlighted');
	const containerHighlighted = document.querySelector('.container-highlighted');

	if (textarea !== undefined) {
		textarea.addEventListener('input', updateHighlighting);
		textarea.addEventListener('scroll', syncScroll);

		function updateHighlighting() {
			const xml = textarea.value;
			highlighted.innerHTML = applySyntaxHighlighting(xml);
		}

		function applySyntaxHighlighting(xml) {
			return xml.replace(/</g, '&lt;')
				.replace(/>/g, '&gt;')
				.replace(/(&lt;\/?)(\w+)(.*?)(\/?&gt;)/g, (match, p1, p2, p3, p4) => {
					return `${p1}<span class="tag">${p2}</span>${highlightAttributes(p3)}${p4}`;
				});
		}

		function highlightAttributes(attributes) {
			return attributes.replace(/(\w+)=(".*?")/g, (match, p1, p2) => {
				return `<span class="attribute">${p1}</span>=<span class="value">${p2}</span>`;
			});
		}

		function syncScroll() {
			highlighted.scrollTop = textarea.scrollTop;
			highlighted.scrollLeft = textarea.scrollLeft;
		}

		// Initialize highlighting
		updateHighlighting();
	}
</script>
