@inject IHttpContextAccessor _httpContextAccessor

@using Hl7.Fhir.Model

@model GetDocumentReferencesViewModel

@{
	ISession session = _httpContextAccessor.HttpContext!.Session;	

	var sessionLoginResult = session.SessionLoginResult();	
}

@{
	string GetInstitutionName(DocumentReference document)
	{
		foreach (var author in document.Author)
		{
			var contained = document.Contained.FirstOrDefault(contained => contained.Id == author.Reference.Replace("#", ""));

			if (contained is Organization)
			{
				var organization = contained as Organization;

				if (organization.Type != null)
				{
					var type = organization.Type.FirstOrDefault();

					var coding = type?.Coding.FirstOrDefault();

					if (coding != null)
					{
						if (coding.System == Constants.Oid.OrganisasjonNummer)
						{
							return organization!.Name;
						}
					}
				}
			}
		}
		return "-"; // Ikke Tilgjengelig
	}

	string GetDepartmentName(DocumentReference document)
	{
		foreach (var author in document.Author)
		{
			var contained = document.Contained.FirstOrDefault(contained => contained.Id == author.Reference.Replace("#", ""));

			if (contained is Organization)
			{
				var organization = contained as Organization;
				if (organization.Type != null)
				{
					var type = organization.Type.FirstOrDefault();

					var coding = type?.Coding.FirstOrDefault();

					if (coding != null)
					{
						if (coding.System == Constants.Oid.ReshId)
						{
							return organization!.Name;
						}
					}
				}
			}
		}
		return "-"; // Ikke Tilgjengelig
	}

	string GetAuthorName(DocumentReference document)
	{
		foreach (var authorRef in document.Author)
		{
			var contained = document.Contained.FirstOrDefault(contained => contained.Id == authorRef.Reference.Replace("#", ""));

			if (contained is Practitioner)
			{
				var author = contained as Practitioner;

				if (author.Name != null)
				{
					var humanName = author.Name.FirstOrDefault();

					var name = string.Join(' ', humanName.Given) + " " + humanName.Family;

					return name;
				}
			}
		}
		return "-"; // Ikke Tilgjengelig
	}	
}

<style>
	.head {
		font-size: 14px;
		font-style: italic;
	}

	tr.document-item {
		cursor: pointer;
	}

	tr.document-detail {
		display: none;
	}

</style>

<script>
	function onDocumentRowClick(e) {
		console.log(e);

		const rowId = e.currentTarget.getAttribute("data-id");

		console.log(rowId);

		const documentDetail = document.querySelector(`tr.document-detail[data-id='${rowId}']`);

		if (documentDetail.style.display == "table-row") {
			documentDetail.style.display = "none";
		}
		else {
			documentDetail.style.display = "table-row";
		}

	}

	function onChangePageSize() {

		const selectPageSize = document.getElementById("pageSize"); 

		const pageSize = parseInt(selectPageSize.value); 		

		const url = "documents?page=@Model.Pagination?.PrevPageIndex&sort=@Model.SortExpression&pageSize=" + pageSize;

		location.href = url; 
	}

	function onChangePage() {

		const selectPage = document.getElementById("page");

		const page = parseInt(selectPage.value);		

		const url = "documents?sort=@Model.SortExpression&pageSize=@Model.Pagination?.PageSize&page=" + page;

		location.href = url;
	}
</script>

<div style="max-width:1900px;margin:0 auto">

	<h4 class="display-6">
		Journaldokumenter

		@if (Model.IsSuccess)
		{
			<span>
				- @Model.Bundle.Total
			</span>
			<span style="background-color:red; color:#fff;padding:4px 10px; font-size:19px; border-radius:4px">Antall sperrede: @Model.NorsCount</span>
		}
	</h4>

	<div style="display:flex;gap:40px">
		<div>

			<h5>Innlogget som:</h5>
			<div>
				<h6>@sessionLoginResult.Name / @sessionLoginResult.AuthorizationName - @sessionLoginResult.OrganizationName</h6>
			</div>
		</div>

		<div>

			<h5>Pasient:</h5>

			<div>
				<h6>@sessionLoginResult.PatientName <span style="font-size:14px;">(@sessionLoginResult.PatientId) @* / Kvinne (33 år) *@</span></h6>
			</div>
		</div>
	</div>

	@if (!Model.IsSuccess)
	{
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<p>
						Error: @Model.ErrorMessage	
					</p>
					<p>
						API response status code: @Model.ApiResult.StatusCode
					</p>
					<p>
						API response body: 
						<pre>
							@Model.ApiResult.Body
						</pre>
					</p>
				</div>
			</div>
		</div>
	}
	else
	{
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<table class="table table-striped table-hover table-sm">
						<thead>
							<tr>
								@{
									var trimmedSort = Model.SortExpression.TrimStart('-');
									var ascending = !Model.SortExpression.StartsWith("-");
									var sortUrl = string.Empty;
								}

								<th>
									@{

										string CreateSortUrl(string sort, bool ascending)
										{
											var trimmedSort = Model.SortExpression.TrimStart('-');

											if (trimmedSort == sort)
											{
												if (ascending)
												{
													sort = "-" + sort;
												}
												else
												{
													sort = sort;
												}
											}

											sortUrl = $"documents?page={Model.Pagination.PrevPageIndex}&pageSize={Model.Pagination.PageSize}&sort={sort}";

											// sortUrl = ascending ?
											// 	$"documents?page={Model.Pagination.PrevPageIndex}&pageSize={Model.Pagination.PageSize}&sort={sort}":
											// 	$"documents?page={Model.Pagination.PrevPageIndex}&pageSize={Model.Pagination.PageSize}&sort={sort}";

											return sortUrl;
										}

										string SortIcon(string sort, bool ascending)
										{
											var trimmedSort = Model.SortExpression.TrimStart('-');

											if (trimmedSort != sort)
												return string.Empty; 

											return ascending ? "<i class='bi-chevron-up'> </i>" : "<i class='bi-chevron-down'> </i>";
										}
									}

									@{
										var dateSortUrl = CreateSortUrl("date", ascending);
										var nameSortUrl = CreateSortUrl("name", ascending);
										var typeSortUrl = CreateSortUrl("type", ascending);
										var securityLabelSortUrl = CreateSortUrl("securityLabel", ascending);
										var cateogorySortUrl = CreateSortUrl("category", ascending);
										var departmentSortUrl = CreateSortUrl("department", ascending);
										var organizationSortUrl = CreateSortUrl("organization", ascending);
									}

									<a href="@dateSortUrl">
										Dato @Html.Raw(SortIcon("date", ascending))
									</a>

								</th>
								<th>
									<a href="@nameSortUrl">
										Dokumentnavn @Html.Raw(SortIcon("name", ascending))
									</a>
								</th>
								<th>

									<a href="@securityLabelSortUrl">
										Nekting @Html.Raw(SortIcon("securityLabel", ascending))
									</a>
								</th>
								<th>

									<a href="@cateogorySortUrl">
										Dokumenttype @Html.Raw(SortIcon("category", ascending))
									</a>
									</th>
								<th>

									<a href="@typeSortUrl">
										Undertype @Html.Raw(SortIcon("type", ascending))
									</a>
									</th>
								<th>
									<a href="@departmentSortUrl">
										Enhet/Avdeling @Html.Raw(SortIcon("department", ascending))
									</a>
								</th>
								<th>

									<a href="@organizationSortUrl">
										Institusjon @Html.Raw(SortIcon("organization", ascending))
									</a>
								</th>
							</tr>

						</thead>
						<tbody>
							@foreach (var entry in Model.Bundle.Entry)
							{
								var document = entry.Resource as DocumentReference;

								if (document == null)
									continue;

								var contentComponent = document.Content.FirstOrDefault();

								if (contentComponent == null)
									continue;

								var attachment = contentComponent.Attachment;
								var format = contentComponent.Format;

								var securityLabels = document.SecurityLabel;

								var rowId = Guid.NewGuid().ToString();

								<tr class="document-item" data-id="@rowId" onclick="onDocumentRowClick(event)">
									<td>
										@if (!string.IsNullOrEmpty(attachment.Creation))
										{
											<div>
												@DateTime.Parse(attachment.Creation).ToShortDateString()
											</div>
										}
									</td>
									<td>
										@attachment.Title
									</td>

									<td>
										@* Nekting *@

										@foreach (var securityLabel in document.SecurityLabel)
										{
											@foreach (var _coding in securityLabel.Coding)
											{
												<span style="color:red">
													@_coding.Code &nbsp;
												</span>
											}
										}
									</td>
									<td>
										@* Dokumenttype / Category *@

										@{
											var categoryCodeableConceptList = document.Category;
											var codeableConcept = categoryCodeableConceptList.FirstOrDefault();

											if (codeableConcept != null)
											{
												var categoryCodingList = codeableConcept.Coding;

												var categoryCoding = categoryCodingList.FirstOrDefault();

												if (categoryCoding != null)
												{
														<div>
															@categoryCoding.Display
														</div>
												}
											}
										}

									</td>
									<td>
										@* Undertype *@

										@{
											codeableConcept = document.Type;
											var codingList = codeableConcept.Coding;

											var coding = codingList.FirstOrDefault();

											if (coding != null)
											{
													<div>
														@coding.Display
													</div>
											}
										}

									</td>
									<td>
										@* Enhet/Avdeling *@
										@{
											var departmentName = GetDepartmentName(document);
										}



										@departmentName

									</td>
									<td>
										@* Institusjon *@

										@{
											var institutionName = GetInstitutionName(document);
										}

										@institutionName

									</td>

								</tr>
								<tr class="document-detail" data-id="@rowId">
									<td colspan="10">

										<div style="display:flex;justify-content:space-between" class="p-2">

											@* Forfatter *@
											<div>
												<div class="head">
													Forfatter
												</div>

												@{
													var authorName = GetAuthorName(document);
												}

												<div>
													@authorName
												</div>
											</div>

											@* Klokkeslett og opprettelse *@

											<div>
												<div class="head">
													Klokkeslett og opprettelse
												</div>

												@if (!string.IsNullOrEmpty(attachment.Creation))
												{
													<div>
														kl. @DateTime.Parse(attachment.Creation).ToShortTimeString()
													</div>
												}
											</div>

											@* Kilde-ID *@

											<div>
												<div class="head">
													Kilde-ID
												</div>

												<div>

													@{
														// DocumentReference har ikke noe konsept for "Repository Unique ID" så foreløpig henter vi det ut fra master identifier / document unique ID
														var s = document.MasterIdentifier.Value.Split("^").ToList(); 

														if (s.Count > 1)
														{
																<div>
																	@s[0]
																</div>
														}
													}
													
												</div>
											</div>

											@* Dokument-ID *@

											<div>
												<div class="head">
													Dokument-ID
												</div>

												<div>
													@document.MasterIdentifier.Value
												</div>

											</div>

											@* ID fra lokal EPJ *@

											<div>
												<div class="head">
													ID fra lokal EPJ
												</div>

												<div>
													urn:uuid:@document.Id
												</div>
											</div>


											<div>
												<div class="head">
													Størrelse
												</div>

												<div>
													@if (attachment.Size.HasValue)
													{													
														if (attachment.Size > Constants.GB)
														{
															<div>
																@((attachment.Size.Value / Constants.GB).ToString("#0.00")) GB
															</div>	
														} 
														else if (attachment.Size.Value > Constants.MB)
														{
															<div>
																@((attachment.Size.Value / Constants.MB).ToString("#0.00")) MB
															</div>	
														} 
														else if (attachment.Size > Constants.KB)
														{
															<div>
																@((attachment.Size.Value / Constants.KB).ToString("#0.00")) KB
															</div>
														} 
														else
														{
															<div>
																@attachment.Size bytes
															</div>
														}
													}
													else
													{
														<div>
															-
														</div>
													}
												</div>
											</div>

											@* Åpne / kopier referanse *@

											@{
												var uri = new Uri(attachment.Url);

												//var openUrl = $"document{uri.Query}"; // Kaller DocumentController->Index metoden for å vise dokument
												var openUrl = $"document?url={System.Web.HttpUtility.UrlEncode(uri.ToString())}"; // Kaller DocumentController->Index metoden for å vise dokument
											}
											<div>
												<a class="btn btn-primary" href="@openUrl" target="_blank">Åpne</a><br />
												@* <button class="btn btn-primary">Kopier referanse</button><br /> *@
											</div>

										</div>

									</td>
								</tr>

							}
						</tbody>
						<tfoot>
						</tfoot>
					</table>

					@* @Html.PagedListPager(Model.Bundle.Entry, page => Url.Action("Index", "Document", new { page, sort = Model.SortExpression, pageSize = Model.PageSize }), PagedListRenderOptions.ClassicPlusFirstAndLast) *@

					@{
						var prevPageUrl = $"documents?page={Model.Pagination.PrevPageIndex}&pageSize={Model.Pagination.PageSize}&sort={Model.SortExpression}";
						var nextPageUrl = $"documents?page={Model.Pagination.NextPageIndex}&pageSize={Model.Pagination.PageSize}&sort={Model.SortExpression}";
					}

					<div class="row">
						<div class="col-md-3">
							<a class="btn btn-primary w-100" href="@prevPageUrl">Forrige</a>
						</div>
						<div class="col-md-3">
							Side <input id="page" type="text" value="@Model.Pagination.CurrentPageIndex" onchange="onChangePage()" /> av @Model.Pagination.PageCount
						</div>
						<div class="col-md-3">
							<select id="pageSize" name="pageSize" onchange="onChangePageSize()" asp-for="Pagination.PageSize">
								
								<option value="10">10 rader per side</option>																							
								<option value="20">20 rader per side</option>
								<option value="25">25 rader per side</option>
								<option value="50">50 rader per side</option>
							</select>
						</div>
						<div class="col-md-3">
							<a class="btn btn-primary w-100" href="@nextPageUrl">Neste</a>
						</div>

					</div>

					@* 	<div class="pagination-container">
				<ul class="pagination">
				<li class="PagedList-skipToFirst disabled"><a>&lt;&lt;</a></li>
				<li class="PagedList-skipToPrevious disabled">
				<a rel="prev">&lt;</a></li>
				<li class="active"><span>1</span></li>
				<li>
				<a href="/Contacts?page=2&amp;sort=recent&amp;pageSize=25">2</a></li>
				<li><a href="/Contacts?page=3&amp;sort=recent&amp;pageSize=25">3</a></li>
				<li><a href="/Contacts?page=4&amp;sort=recent&amp;pageSize=25">4</a></li>
				<li><a href="/Contacts?page=10&amp;sort=recent&amp;pageSize=25">10</a></li>
				<li class="PagedList-skipToNext"><a href="/Contacts?page=2&amp;sort=recent&amp;pageSize=25" rel="next">&gt;</a></li>
				<li class="PagedList-skipToLast"><a href="/Contacts?page=219&amp;sort=recent&amp;pageSize=25">&gt;&gt;</a></li>
				</ul></div>  *@

				</div>
			</div>
		</div>
	}
</div>
